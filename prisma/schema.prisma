// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  password       String?
  role           Role             @default(user)
  image          String?
  accounts       Account[]
  sessions       Session[]
  QuizSubmission QuizSubmission[]
  UserCode       UserCode[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Quiz {
  id             String  @id @default(uuid())
  title          String
  prompt         String
  kind           Kind    @default(single)
  choices        Json
  correctAnswers Json
  codeSnippet    String?
}

enum Kind {
  single
  multiple
}

enum Role {
  admin
  user
}

model QuizSubmission {
  id          String   @id @default(uuid())
  userId      String
  quizList    Json
  userAnswers Json
  finishTime  Int
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Challenge {
  id               String   @id @default(uuid())
  category         String?
  type             String?
  name             String
  slug             String?  @unique
  prompt           String?  @db.Text
  hints            Json?
  languageToWrite  String?
  promptCode       Json?
  reactConfig      Json?
  solution         String?
  difficulty       String?
  tags             Json?
  shortDescription String?
  createdAt        DateTime @default(now())
}

model UserCode {
  id        String @id @default(uuid())
  userId    String
  challenge String
  code      String @db.Text

  user User @relation(fields: [userId], references: [id])
}

model TriviaQuestion {
  id        String   @id @default(uuid())
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())
  category  String?
}
